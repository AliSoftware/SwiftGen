// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import UIKit

extension UIColor {
  convenience init(rgbaValue: UInt32) {
    let red   = CGFloat((rgbaValue >> 24) & 0xff) / 255.0
    let green = CGFloat((rgbaValue >> 16) & 0xff) / 255.0
    let blue  = CGFloat((rgbaValue >>  8) & 0xff) / 255.0
    let alpha = CGFloat((rgbaValue      ) & 0xff) / 255.0

    self.init(red: red, green: green, blue: blue, alpha: alpha)
  }
}

{% if colors %}
extension UIColor {
  {# Note: We don't use a UInt32 rawValue, so we can have multiple colors with the same rgbaValue #}
  enum {{enumName}} {
    {% for color in colors %}
    case {{color.name|swiftIdentifier}}
    {% endfor %}

    static let rgbaValues: [{{enumName}}:UInt32] = [
      {% for color in colors %}
      .{{color.name|swiftIdentifier}} : 0x{{color.rgba}},
      {% endfor %}
    ]

    var rgbaValue: UInt32! {
      return {{enumName}}.rgbaValues[self]
    }
  }

  convenience init(named name: {{enumName}}) {
    self.init(rgbaValue: name.rgbaValue)
  }
}
{% else %}
// No color found
{% endif %}
