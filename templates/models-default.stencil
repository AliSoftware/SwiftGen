// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

public final class {{ spec.type }}: DataModel {
{% for field in spec.fields %}
    let {{ field.name }}: {% ifstrequal "array" field.type %}[{{ field.element|titlecase }}]{% else %}{{ field.type|titlecase }}{% if field.optional %}?{% endif %}{% endif %}
{% endfor %}

    public init({% for field in spec.fields %}{{ field.name }}: {% ifstrequal "array" field.type %}[{{ field.element|titlecase }}]{% else %}{{ field.type|titlecase }}{% if field.optional %}?{% endif %}{% endif %}, {% endfor %}) {
{% for field in spec.fields %}
        self.{{ field.name }} = {{ field.name }}
{% endfor %}
    }

    public init(dictionary: [String: Any]) throws {
        let parser = Parser(dictionary: dictionary)
{% for field in spec.fields %}
        self.{{ field.name }} = try parser.fetch{% if field.optional %}Optional{% endif %}("{{ field.name }}")
{% endfor %}
    }

    public static func parse(data: Any) throws -> UnitTestClass {
        if let data = data as? [String: Any] {
            return try {{ spec.type }}(dictionary: data)
        }
        throw ParserError(message: "Wrong type")
    }

    public func data() -> [String: Any] {
        var data = [String: Any]()
{% for field in spec.fields %}
        data["{{ field.name }}"] = {{ field.name }}{% if field.optional %}?{% endif %}{% ifstrequal "array" field.type %}.map { $0.dataRepresentation() }{% else %}.dataRepresentation(){% endif %}
{% endfor %}
        return data
    }
}
