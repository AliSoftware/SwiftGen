// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

{% if strings %}
import Foundation

protocol Localizable: CustomStringConvertible {
  static var tableName: String { get }
  var localized: String { get }
}

extension Localizable {
  var description: String { get { return self.localized } }
}

struct {{enumName}} {
  static func tr(table: String, _ key: String, _ params: CVarArgType...) -> String {
    let format = NSLocalizedString(key, tableName: table, comment: "")
    return params.count == 0 ? format : String(format: format, args: params)
  }

  enum {{tableName}}Table: Localizable {
    static let tableName = "{{tableName}}"

    {% for string in strings %}
    /// {{string.translation}}
    case {{string.key|swiftIdentifier|snakeToCamelCase}}{% if string.params %}({{string.params.types|join}}){% endif %}
    {% endfor %}

    var localized: String {
      switch self {
        {% for string in strings %}
        {% if string.params %}
        case .{{string.key|swiftIdentifier|snakeToCamelCase}}({{string.params.declarations|join}}):
        return {{enumName}}.tr({{tableName}}Table.tableName, "{{string.key}}", {{string.params.names|join}})
        {% else %}
        case .{{string.key|swiftIdentifier|snakeToCamelCase}}:
        return {{enumName}}.tr({{tableName}}Table.tableName, "{{string.key}}")
        {% endif %}
        {% endfor %}
      }
    }
  }
}

func tr(key: Localizable) -> String { return key.localized }
{% else %}
// No string found
{% endif %}
