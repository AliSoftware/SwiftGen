//
// SwiftGen
// Copyright (c) 2015 Olivier Halligon
// MIT Licence
//

import Foundation

/*
 These protocols are helper protocols which all our models adhere to.
 `DataConvertible` is implemented by any class which we want to parse into a model.
 For example, `String` and `Int` implement this protocol so they are easy to parse.
 This is why they return `Any` instead of a dictionary.
 */

/**
 This protocol is implemented by all the data models generated by SwiftGen.
 It allows you to convert a model to `[String: Any]` and `[String: Any]` to a model.
 */
public protocol DataModel: DataConvertible {
  /**
   Converts a `DataModel` to `[String: Any]` representation.
   */
  func data() -> [String: Any]
}

extension DataModel {
  /**
   This overrides the default method which returns `Any` to return the method that returns `[String: Any]`
   */
  public func dataRepresentation() -> Any {
    return data()
  }
}

/**
 This protocol is implemented by any type which we want to parse.
 This includes types like `String` and `Int` so these functions take `Any` as parameters.
 */
public protocol DataConvertible {
  /**
   Parses data into the current class and attempts to return an instance of the class.
   If a parsing error occurs, the error block will be called with a descriptive `String`.
   Even if a parsing error occurs, the function may attempt to return a 'best effort' representation of itself.
   For instance, it may choose to nil out optional fields.
   */
  static func parse(data: Any, error: (String) throws -> Void) rethrows -> Self?

  /**
   Converts the class back into a data representation.
   This is the opposite of `parse(...)`.
   */
  func dataRepresentation() -> Any
}

