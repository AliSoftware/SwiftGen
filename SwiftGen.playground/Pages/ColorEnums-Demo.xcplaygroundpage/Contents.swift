import UIKit



//: #### SwiftGenStoryboardEnumBuilder Usage Example

let enumBuilder = SwiftGenColorEnumBuilder()
if let colorsFile = NSBundle.mainBundle().pathForResource("colors", ofType: "txt") {
    try enumBuilder.parseTextFile(colorsFile)
}
print(enumBuilder.build())

/* Note that you can ask the builder to also generate a string initializer
   that takes a Hex string: "convenience init(hexString: String)" */

// print(enumBuilder.build(generateStringInit: true))



//: #### Code Generated by the Builder

// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import UIKit

extension UIColor {
    convenience init(rgbaValue: UInt32) {
        let red   = CGFloat((rgbaValue >> 24) & 0xff) / 255.0
        let green = CGFloat((rgbaValue >> 16) & 0xff) / 255.0
        let blue  = CGFloat((rgbaValue >>  8) & 0xff) / 255.0
        let alpha = CGFloat((rgbaValue      ) & 0xff) / 255.0
        
        self.init(red: red, green: green, blue: blue, alpha: alpha)
    }
}

extension UIColor {
    enum Name : UInt32 {
        case Translucent = 0xffffffcc
        case ArticleBody = 0x339666ff
        case Cyan = 0xff66ccff
        case ArticleTitle = 0x33fe66ff
    }
    
    convenience init(named name: Name) {
        self.init(rgbaValue: name.rawValue)
    }
}



//: #### Usage Example

UIColor(named: .ArticleTitle)
UIColor(named: .ArticleBody)
UIColor(named: .ArticleBody)
UIColor(named: .Translucent)
/* Only possible if you used `enumBuilder.build(generateStringInit: true)` to generate the enum */
//let orange = UIColor(hexString: "#ffcc88")
let lightGreen = UIColor(rgbaValue: 0x00ff88ff)

