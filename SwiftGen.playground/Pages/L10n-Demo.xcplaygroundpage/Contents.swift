import Foundation



//: #### SwiftGenL10nEnumBuilder Usage Example

if let path = NSBundle.mainBundle().pathForResource("Localizable", ofType: "strings") {
    let enumBuilder = SwiftGenL10nEnumBuilder()
    do {
        try enumBuilder.parseLocalizableStringsFile(path)
    }
    catch {
        print("Error while reading file \(path): \(error)")
    }
    print(enumBuilder.build())
}



//: #### Code Generated by the Builder

// AUTO-GENERATED FILE, DO NOT EDIT

enum L10n {
    case AlertTitle
    case AlertMessage
    case Greetings(String, Int)
    case ApplesCount(Int)
    case BananasOwner(Int, String)
}

extension L10n : CustomStringConvertible {
    var description : String { return self.string }
    
    var string : String {
        switch self {
        case .AlertTitle:
            return L10n.tr("alert_title")
        case .AlertMessage:
            return L10n.tr("alert_message")
        case .Greetings(let p0, let p1):
            return L10n.tr("greetings", p0, p1)
        case .ApplesCount(let p0):
            return L10n.tr("apples.count", p0)
        case .BananasOwner(let p0, let p1):
            return L10n.tr("bananas.owner", p0, p1)
        }
    }
    
    private static func tr(key: String, _ args: CVarArgType...) -> String {
        let format = NSLocalizedString(key, comment: "")
        return String(format: format, arguments: args)
    }
}

func tr(key: L10n) -> String {
    return key.string
}



//: #### Usage example

let alertTitle = tr(.AlertTitle)
let hello1 = tr(.Greetings("David", 29))
let hello2 = L10n.Greetings("Olivier", 32) // Prints as a string in the console because it's CustomStringConvertible


