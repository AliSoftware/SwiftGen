//: #### Other pages
//:
//: * [Demo for swiftgen-l10n](L10n-Demo)
//: * [Demo for swiftgen-assets](Assets-Demo)
//: * Demo for swiftgen-storyboard
//: * [Demo for swiftgen-colors](Colors-Demo)

import UIKit

class CreateAccViewController : UIViewController {}

//: #### Example of code generated by swiftgen-storyboard

// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import Foundation
import UIKit

protocol StoryboardScene : RawRepresentable {
    static var storyboardName : String { get }
    static func storyboard() -> UIStoryboard
    static func initialViewController() -> UIViewController
    func viewController() -> UIViewController
    static func viewController(identifier: Self) -> UIViewController
}

extension StoryboardScene where Self.RawValue == String {
    static func storyboard() -> UIStoryboard {
        return UIStoryboard(name: self.storyboardName, bundle: nil)
    }
    
    static func initialViewController() -> UIViewController {
        return storyboard().instantiateInitialViewController()!
    }
    
    func viewController() -> UIViewController {
        return Self.storyboard().instantiateViewControllerWithIdentifier(self.rawValue)
    }
    static func viewController(identifier: Self) -> UIViewController {
        return identifier.viewController()
    }
}

extension UIStoryboard {
    struct Scene {
        enum Wizzard : String, StoryboardScene {
            static let storyboardName = "Wizzard"
            
            case CreateAccount = "CreateAccount"
            static func createAccountViewController() -> CreateAccViewController {
                return Wizzard.CreateAccount.viewController() as! CreateAccViewController
            }
            
            case AcceptCGU = "Accept-CGU"
            static func acceptCGUViewController() -> UIViewController {
                return Wizzard.AcceptCGU.viewController()
            }
            
            case ValidatePassword = "Validate_Password"
            static func validatePasswordViewController() -> UIViewController {
                return Wizzard.ValidatePassword.viewController()
            }
            
            case Preferences = "Preferences"
            static func preferencesViewController() -> UIViewController {
                return Wizzard.Preferences.viewController()
            }
        }
    }
    
    struct Segue {
        enum Message : String {
            case Custom = "Custom"
            case Back = "Back"
            case NonCustom = "NonCustom"
        }
    }
}

//: #### Usage Example

let initialVC = UIStoryboard.Scene.Wizzard.initialViewController()
initialVC.title

let validateVC = UIStoryboard.Scene.Wizzard.ValidatePassword.viewController()
validateVC.title

/* Note: the following line would crash when run in playground, because the storyboard file
   was not compiled alongside the playground code, so the CreateAccViewController class was
   not known by the storyboard. But it should work correctly in a real project. */
// let cgu = UIStoryboard.Scene.Wizzard.createAccountViewController()

let segue = UIStoryboard.Segue.Message(rawValue: "Custom")!
segue

switch segue {
  case .Custom:
    print("Working! ðŸŽ‰")
  default:
    print("Not working! ðŸ˜±")
}

/*******************************************************************************
This is a Â«real worldÂ» example of how you can benefit from the generated enum;
you can easily switch or directly compare the passed in `segue` with the corresponding
segues for a specific storyboard.
*******************************************************************************/
//override func prepareForSegue(_ segue: UIStoryboardSegue, sender sender: AnyObject?) {
//  switch UIStoryboard.Segue.Message(rawValue: segue.identifier)! {
//  case .Custom:
//    // Prepare for your custom segue transition
//  case .NonCustom:
//    // Pass in information to the destination View Controller
//  }
//}
