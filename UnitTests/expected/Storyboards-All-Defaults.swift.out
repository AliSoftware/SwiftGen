// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import Foundation
import UIKit

protocol StoryboardSceneType {
  static var storyboardName : String { get }
}

extension StoryboardSceneType {
  static func storyboard() -> UIStoryboard {
    return UIStoryboard(name: self.storyboardName, bundle: nil)
  }

  static func initialViewController() -> UIViewController {
    return storyboard().instantiateInitialViewController()!
  }
}

extension StoryboardSceneType where Self: RawRepresentable, Self.RawValue == String {
  func viewController() -> UIViewController {
    return Self.storyboard().instantiateViewControllerWithIdentifier(self.rawValue)
  }
  static func viewController(identifier: Self) -> UIViewController {
    return identifier.viewController()
  }
}

protocol StoryboardSegueType : RawRepresentable { }

func == <S: StoryboardSegueType where S.RawValue == String>(lhs: String?, rhs: S) -> Bool {
  return lhs == rhs.rawValue
}

func == <S: StoryboardSegueType where S.RawValue == String>(lhs: S, rhs: String?) -> Bool {
  return lhs.rawValue == rhs
}

extension UIViewController {
  func performSegue<S : StoryboardSegueType where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier(segue.rawValue, sender: sender)
  }
}

struct StoryboardScene {
  enum Anonymous : StoryboardSceneType {
    static let storyboardName = "Anonymous"
  }
  enum Message : String, StoryboardSceneType {
    static let storyboardName = "Message"

    case Composer = "Composer"
    static func composerViewController() -> UIViewController {
      return StoryboardScene.Message.Composer.viewController()
    }

    case MessagesList = "MessagesList"
    static func messagesListViewController() -> UITableViewController {
      return StoryboardScene.Message.MessagesList.viewController() as! UITableViewController
    }

    case NavCtrl = "NavCtrl"
    static func navCtrlViewController() -> UINavigationController {
      return StoryboardScene.Message.NavCtrl.viewController() as! UINavigationController
    }

    case URLChooser = "URLChooser"
    static func urlChooserViewController() -> XXPickerViewController {
      return StoryboardScene.Message.URLChooser.viewController() as! XXPickerViewController
    }
  }
  enum Wizard : String, StoryboardSceneType {
    static let storyboardName = "Wizard"

    case Accept_CGU = "Accept-CGU"
    static func acceptCGUViewController() -> UIViewController {
      return StoryboardScene.Wizard.Accept_CGU.viewController()
    }

    case CreateAccount = "CreateAccount"
    static func createAccountViewController() -> CreateAccViewController {
      return StoryboardScene.Wizard.CreateAccount.viewController() as! CreateAccViewController
    }

    case Preferences = "Preferences"
    static func preferencesViewController() -> UITableViewController {
      return StoryboardScene.Wizard.Preferences.viewController() as! UITableViewController
    }

    case Validate_Password = "Validate_Password"
    static func validatePasswordViewController() -> UIViewController {
      return StoryboardScene.Wizard.Validate_Password.viewController()
    }
  }
}

struct StoryboardSegue {
  enum Message : String, StoryboardSegueType {
    case CustomBack = "CustomBack"
    case Embed = "Embed"
    case NonCustom = "NonCustom"
    case Show_NavCtrl = "Show-NavCtrl"
  }
  enum Wizard : String, StoryboardSegueType {
    case ShowPassword = "ShowPassword"
  }
}
