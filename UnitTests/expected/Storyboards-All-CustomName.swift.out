// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import Foundation
import UIKit

protocol StoryboardScene {
  static var storyboardName : String { get }
}

extension StoryboardScene {
  static func storyboard() -> UIStoryboard {
    return UIStoryboard(name: self.storyboardName, bundle: nil)
  }

  static func initialViewController() -> UIViewController {
    return storyboard().instantiateInitialViewController()!
  }
}

extension StoryboardScene where Self: RawRepresentable, Self.RawValue == String {
  func viewController() -> UIViewController {
    return Self.storyboard().instantiateViewControllerWithIdentifier(self.rawValue)
  }
  static func viewController(identifier: Self) -> UIViewController {
    return identifier.viewController()
  }
}

protocol StoryboardSegue : RawRepresentable { }
protocol StoryboardCell : RawRepresentable { }

extension UIViewController {
  func performSegue<S : StoryboardSegue where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier(segue.rawValue, sender: sender)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<C : StoryboardCell where C.RawValue == String>(identifier: C,
      forIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
    return dequeueReusableCellWithReuseIdentifier(identifier.rawValue, forIndexPath: indexPath)
  }
}

extension UIStoryboard {
  struct XCTStoryboardsScene {
    enum Anonymous : StoryboardScene {
      static let storyboardName = "Anonymous"
    }
    enum Message : String, StoryboardScene {
      static let storyboardName = "Message"

      case Composer = "Composer"
      static func composerViewController() -> UIViewController {
        return Message.Composer.viewController()
      }

      case MessagesList = "MessagesList"
      static func messagesListViewController() -> UITableViewController {
        return Message.MessagesList.viewController() as! UITableViewController
      }

      case NavCtrl = "NavCtrl"
      static func navCtrlViewController() -> UINavigationController {
        return Message.NavCtrl.viewController() as! UINavigationController
      }

      case URLChooser = "URLChooser"
      static func urlChooserViewController() -> XXPickerViewController {
        return Message.URLChooser.viewController() as! XXPickerViewController
      }
    }
    enum Wizard : String, StoryboardScene {
      static let storyboardName = "Wizard"

      case Accept_CGU = "Accept-CGU"
      static func acceptCGUViewController() -> UIViewController {
        return Wizard.Accept_CGU.viewController()
      }

      case CreateAccount = "CreateAccount"
      static func createAccountViewController() -> CreateAccViewController {
        return Wizard.CreateAccount.viewController() as! CreateAccViewController
      }

      case Preferences = "Preferences"
      static func preferencesViewController() -> UITableViewController {
        return Wizard.Preferences.viewController() as! UITableViewController
      }

      case Validate_Password = "Validate_Password"
      static func validatePasswordViewController() -> UIViewController {
        return Wizard.Validate_Password.viewController()
      }
    }
  }

  struct XCTStoryboardsSegue {
    enum Message : String, StoryboardSegue {
      case CustomBack = "CustomBack"
      case Embed = "Embed"
      case NonCustom = "NonCustom"
      case Show_NavCtrl = "Show-NavCtrl"
    }
    enum Wizard : String, StoryboardSegue {
      case ShowPassword = "ShowPassword"
    }
  }

  struct Cell {
    enum Anonymous : String, StoryboardCell {
      case ReuseCellID = "ReuseCellID"
    }
    enum Message : String, StoryboardCell {
      case CustomCollectionCell = "CustomCollectionCell"
      case CustomMessageCell = "CustomMessageCell"
    }
    enum Wizard : String, StoryboardCell {
      case PrefCell = "PrefCell"
    }
  }
}
