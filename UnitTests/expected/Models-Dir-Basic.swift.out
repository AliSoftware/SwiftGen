// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

public final class UnitTestClass: DataModel, Equatable {
    public let firstName: String?
    public let lastName: String
    public let friends: [UnitTestClass]
    public let optFriends: [UnitTestClass]?
    public let age: Int?

    public init(firstName: String?, lastName: String, friends: [UnitTestClass], optFriends: [UnitTestClass]?, age: Int?) {
        self.firstName = firstName
        self.lastName = lastName
        self.friends = friends
        self.optFriends = optFriends
        self.age = age
    }

    public init(dictionary: [String: Any]) throws {
        let parser = Parser(dictionary: dictionary)
        self.firstName = try parser.fetch("firstName")
        self.lastName = try parser.fetch("lastName")
        self.friends = try parser.fetch("friends")
        self.optFriends = try parser.fetch("optFriends")
        self.age = try parser.fetch("age")
    }

    public static func parsed(data: Any) throws -> UnitTestClass {
        if let data = data as? [String: Any] {
            return try UnitTestClass(dictionary: data)
        }
        throw ParserError(message: "Expected a [String: Any] but got \(type(of: data))")
    }

    public func data() -> [String: Any] {
        var data = [String: Any]()
        data["firstName"] = firstName?.dataRepresentation()
        data["lastName"] = lastName.dataRepresentation()
        data["friends"] = friends.map { $0.dataRepresentation() }
        data["optFriends"] = optFriends?.map { $0.dataRepresentation() }
        data["age"] = age?.dataRepresentation()
        return data
    }

    public func map(update: (Builder)->()) -> UnitTestClass {
        let builder = Builder(copy: self)
        update(builder)
        return builder.build()
    }

    public final class Builder {
        public var firstName: String?
        public var lastName: String
        public var friends: [UnitTestClass]
        public var optFriends: [UnitTestClass]?
        public var age: Int?

        public init(copy: UnitTestClass) {
            firstName = copy.firstName
            lastName = copy.lastName
            friends = copy.friends
            optFriends = copy.optFriends
            age = copy.age
        }

        public func build() -> UnitTestClass {
            return UnitTestClass(firstName: firstName, lastName: lastName, friends: friends, optFriends: optFriends, age: age)
        }
    }
}

public func ==(lhs: UnitTestClass, rhs: UnitTestClass) -> Bool {
    return lhs.firstName == rhs.firstName && lhs.lastName == rhs.lastName && lhs.friends == rhs.friends && lhs.optFriends == rhs.optFriends && lhs.age == rhs.age
}
