// Generated using SwiftGen, by O.Halligon â€” https://github.com/AliSoftware/SwiftGen

import Foundation
import UIKit

protocol StoryboardScene {
  static var storyboardName : String { get }
}

extension StoryboardScene {
  static func storyboard() -> UIStoryboard {
    return UIStoryboard(name: self.storyboardName, bundle: nil)
  }

  static func initialViewController() -> UIViewController {
    return storyboard().instantiateInitialViewController()!
  }
}

extension StoryboardScene where Self: RawRepresentable, Self.RawValue == String {
  func viewController() -> UIViewController {
    return Self.storyboard().instantiateViewControllerWithIdentifier(self.rawValue)
  }
  static func viewController(identifier: Self) -> UIViewController {
    return identifier.viewController()
  }
}

protocol StoryboardSegue : RawRepresentable { }
protocol StoryboardCell : RawRepresentable { }

extension UIViewController {
  func performSegue<S : StoryboardSegue where S.RawValue == String>(segue: S, sender: AnyObject? = nil) {
    performSegueWithIdentifier(segue.rawValue, sender: sender)
  }
}

extension UICollectionView {
  func dequeueReusableCellWithReuseIdentifier<C : StoryboardCell where C.RawValue == String>(identifier: C,
      forIndexPath indexPath: NSIndexPath) -> UICollectionViewCell {
    return dequeueReusableCellWithReuseIdentifier(identifier.rawValue, forIndexPath: indexPath)
  }
}

extension UIStoryboard {
  struct Scene {
    enum Message : String, StoryboardScene {
      static let storyboardName = "Message"

      case composer = "Composer"
      static func composerViewController() -> UIViewController {
        return Message.composer.viewController()
      }

      case messagesList = "MessagesList"
      static func messagesListViewController() -> UITableViewController {
        return Message.messagesList.viewController() as! UITableViewController
      }

      case navCtrl = "NavCtrl"
      static func navCtrlViewController() -> UINavigationController {
        return Message.navCtrl.viewController() as! UINavigationController
      }

      case urlChooser = "URLChooser"
      static func urlChooserViewController() -> XXPickerViewController {
        return Message.urlChooser.viewController() as! XXPickerViewController
      }
    }
  }

  struct Segue {
    enum Message : String, StoryboardSegue {
      case CustomBack = "CustomBack"
      case Embed = "Embed"
      case NonCustom = "NonCustom"
      case Show_NavCtrl = "Show-NavCtrl"
    }
  }
}
